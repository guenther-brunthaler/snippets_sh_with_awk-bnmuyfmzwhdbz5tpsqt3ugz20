@@header
#! /bin/sh
set -e
exit_version() {
	cat << EOF; exit # Text width: 66 columns.
$APPLICATION_NAME Version 2017.223.2

Copyright (c) 2017 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
EOF
}
APPLICATION_NAME=$0

exit_help() {
	cat << EOF; echo; exit_version # Text width: 66 columns.
@@help_modexp
$APPLICATION_NAME - sufficiently efficient modular exponentiation

Calculate (<base> ** <exponent>) modulo <modulus> with sufficient
efficiency even for very large numbers, such as those required in
the Diffie-Hellman key exchange protocol.

Usage: $APPLICATION_NAME <base> <exponent> <modulus>
@@common_options

Options:

-b <base>:
   Specify a radix base between 2 and 36 for input/output.
   Defaults to 0 if omitted. The value 0 means automatic input
   radix base detection and a fixed output radix of 10.
-A <awk_cmd>
   Invoke <awk_cmd> internally rather than the default "awk". For
   example, <awk_cmd> could be "busybox awk".
-h: Display this help and exit
-V: Display version information and exit

Automatic input radix base detection:

Without option -b or with option -b0, every argument defaults to
radix base 10 but the following argument prefixes can be used to
override the base individually:

* "0x" and "0X" selects base 16.
* "0o" and "0O" selects base 8.
* "0b" and "0B" selects base 2.
* "0r<base> and "0r<base>:" selects base <base> (<base> itself
  must be specified as a decimal number between 1 and 36)
EOF
}

trap 'test $? = 0 || echo "$0 failed (option -h shows help)!" >& 2' 0
radix=0
awk=awk
while getopts b:A:hV opt
do
	case $opt in
		b)
			expr x"$OPTARG" : x'[1-9][0-9]*$' > /dev/null
			radix=$OPTARG
			;;
		A) awk=$OPTARG;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`
@@embed_awk
$awk -f - -- "$@" << EOF || false
@@vinternal
	function vinternal(    i, al, c) {
		for (vmodulus= 1; vmodulus + 1 > vmodulus; ) {
			vmodulus+= vmodulus
		}
		vshiftin= vmodulus * 0.5 # The bit shifted in by vlsr().
		valphabet= "0123456789abcdefghijklmnopqrstuvwxyz"
		al= length(valphabet)
		for (i= 1; i <= al; ++i) {
			vrevdigits[c= substr(valphabet, i, 1)]= i
			vrevdigits[toupper(c)]= i
		}
	}

@@vinit
	# <uint> may be omitted if <v> will be assigned to before use anyway.
	function vinit(v, uint    , i) {
		if (!vmodulus) vinternal()
		for (i in v) delete v[i]
		v["n"]= 1
		v[0]= uint
	}

@@vassign
	# Both <dst> and <src> must already be initialized objects.
	function vassign(dst, src    , i, ns, nd) {
		nd= dst["n"]; ns= src["n"]
		for (i= 0; i < ns; ++i) dst[i]= src[i]
		while (i < nd) delete dst[i++]
		dst["n"]= ns
	}

@@vadd
	function vadd(dst, add    , i, n, sum, carry) {
		if (add["n"] > (n= dst["n"])) dst["n"]= n= add["n"]
		for (carry= i= 0; i < n; ++i) {
			if ( \
				carry= (sum= dst[i] + add[i] + carry) \
					>= vmodulus \
			) { \
				sum-= vmodulus
			}
			dst[i]= sum
		}
		if (carry) {
			dst[n]= 1
			dst["n"]= n + 1
		}
	}

@@vnormalize
	function vnormalize(v    , n, i) {
		i= n= v["n"]
		while (i > 1 && v[i - 1] == 0) delete v[--i]
		if (i < n) v["n"]= i
	}

@@vmult
	function vmult(dst, mult    , add, m, i, j, n, b, b0) {
		vnormalize(dst); vnormalize(mult)
		# Ensure <m> becomes the shorter of <dst> and <mult>, and
		# <add> becomes the longer one.
		vinit(m); vinit(add)
		if ((n= mult["n"] - dst["n"]) == 0) {
			n= mult[mult["n"] - 1] - dst[dst["n"] - 1]
		}
		if (n <= 0) {
			vassign(m, mult); vassign(add, dst)
		} else {
			vassign(m, dst); vassign(add, mult)
		}
		n= m["n"]; vinit(dst, 0)
		for (i= 0; i < n; ++i) {
			b= m[i]
			for (j= 1; j < vmodulus; j+= j) {
				b0= b * 0.5
				if ((b= int(b0)) != b0) {
					vadd(dst, add)
					if (!b && i + 1 == n) break
				}
				vadd(add, add)
			}
		}
	}

@@vlsr
	# Returns the previous least significant bit that has been shifted out.
	function vlsr(dst    , carry, n, b) {
		vnormalize(dst)
		carry= 0
		for (n= dst["n"]; n--; ) {
			b= dst[n] * 0.5
			if (int(b) != b) {
				b= int(b) + carry
				carry= vshiftin
			} else {
				b+= carry
				carry= 0
			}
			dst[n]= b
		}
		vnormalize(dst)
		return !!carry
	}

@@vcmp
	function vcmp(v1, v2    , i, n, nallz, diff, borrow) {
		if (v2["n"] > (n= v1["n"])) n= v2["n"]
		for (nallz= borrow= i= 0; i < n; ++i) {
			if (borrow= (diff= v1[i] - v2[i] - borrow) < 0) {
				diff+= vmodulus
			}
			if (diff) nallz= 1
		}
		return borrow ? -1 : nallz
	}

@@vmodsum
	# <dst> as well as <add> must be less than <mod>.
	function vmodsum(dst, add, mod    , i, n, sum, carry, borrow) {
		if (add["n"] > (n= mod["n"])) n= add["n"]
		if (n > dst["n"]) dst["n"]= n; else n= dst["n"]
		for (carry= borrow= i= 0; i < n; ++i) {
			if ( \
				carry= (sum= dst[i] + add[i] + carry) \
				>= vmodulus \
			) {
				sum-= vmodulus
			}
			dst[i]= sum
			borrow= (sum-= mod[i] - borrow) < 0
		}
		if (!borrow) {
			for (borrow= i= 0; i < n; ++i) {
				if ( \
					borrow \
					= (sum= dst[i] - mod[i] - borrow) < 0 \
				) {
					sum+= vmodulus
				}
				dst[i]= sum
			}
		}
	}

@@vmodmult
	# <dst> as well as <mult> must be less than <mod>.
	function vmodmult(dst, mult, mod    , add, m, i, j, n, b, b0) {
		vnormalize(dst); vnormalize(mult)
		# Ensure <m> becomes the shorter of <dst> and <mult>, and
		# <add> becomes the longer one.
		vinit(m); vinit(add)
		if ((n= mult["n"] - dst["n"]) == 0) {
			n= mult[mult["n"] - 1] - dst[dst["n"] - 1]
		}
		if (n <= 0) {
			vassign(m, mult); vassign(add, dst)
		} else {
			vassign(m, dst); vassign(add, mult)
		}
		n= m["n"]; vinit(dst, 0)
		for (i= 0; i < n; ++i) {
			b= m[i]
			for (j= 1; j < vmodulus; j+= j) {
				b0= b * 0.5
				if ((b= int(b0)) != b0) {
					vmodsum(dst, add, mod)
					if (!b && i + 1 == n) break
				}
				vmodsum(add, add, mod)
			}
		}
	}

@@vmodexp
	# <dst> must be less than <mod>.
	function vmodexp(dst, ex, mod    , mult) {
		vnormalize(ex)
		if (ex["n"] == 1 && ex[0] == 0) {
			vinit(dst, 1) # dst^0 == 1.
			return
		}
		vinit(mult, 1)
		# Reduce exponent until dst^1 == dst.
		while (ex["n"] != 1 || ex[0] != 1) {
			if (vlsr(ex)) {
				# dst^(2*ex+1) == dst*(dst^(2*ex))
				vmodmult(mult, dst, mod)
			}
			# dst^(2*ex) == (dst*dst)^ex
			vmodmult(dst, dst, mod)
		}
		vmodmult(dst, mult, mod)
	}

@@v2str
	function v2str( \
		v, uint_radix_opt    , \
		vn, i, j, k, n, o, b, carry, sum \
	) {
		if (!uint_radix_opt) {
			uint_radix_opt= 10
		} else if ( \
			uint_radix_opt < 2 \
			|| uint_radix_opt > length(valphabet) \
		) {
			die( \
				"Unsupported output radix base " \
				uint_radix_opt "!" \
			)
		}
		vnormalize(v); vn= v["n"]
		n= 0; o[n++]= 0
		for (i= vn; i--; ) {
			b= v[i]
			for (j= vmodulus; (j*= 0.5) >= 1; ) {
				if (carry= b >= j) b-= j
				for (k= 0; k < n; ++k) {
					sum= o[k]
					if ( \
						carry= (sum+= sum + carry) \
						>= uint_radix_opt \
					) {
						sum-= uint_radix_opt
					}
					o[k]= sum
				}
				if (carry) o[n++]= 1
			}
		}
		sum= ""
		for (k= n; k--; ) sum= sum substr(valphabet, o[k] + 1, 1)
		return sum
	}

@@vstr2v
	function vstr2v(dst, str, uint_radix_opt    , radix, i, sl, c, a) {
		if (!uint_radix_opt) {
			if (sub("^0[xX]", "", str)) uint_radix_opt= 16
			else if (sub("^0[oO]", "", str)) uint_radix_opt= 8
			else if (sub("^0[bB]", "", str)) uint_radix_opt= 2
			else if (match(str, "^0[rR][1-9][0-9]*:")) {
				uint_radix_opt= substr(str, RSTART, RLENGTH)
				str= substr(str, RSTART + RLENGTH)
				match(uint_radix_opt, "[1-9][0-9]*")
				uint_radix_opt= 0 + substr( \
					uint_radix_opt, RSTART, RLENGTH \
				)
			}
		} else {
			uint_radix_opt+= 0
		}
		if (!uint_radix_opt) uint_radix_opt= 10
		vinit(radix, uint_radix_opt)
		sl= length(str); vinit(dst, 0); vinit(a)
		for (i= 1; i <= sl; ++i) {
			if ( \
				!(c= vrevdigits[substr(str, i, 1)]) \
				|| c > uint_radix_opt \
			) {
				die( \
					"Invalid digit '" substr(str, i, 1) \
					"' in '" str "' for radix base " \
					uint_radix_opt "!" \
				)
			}
			vmult(dst, radix)
			vinit(a, c - 1)
			vadd(dst, a)
		}
	}

@@die
	function die(msg) {
		print msg > "/dev/stderr"
		exit 1 # Will be converted to false.
	}

@@modexp_main
	BEGIN {
		if (ARGC != 4) die("Invalid arguments!")
		vstr2v(x, ARGV[1], $radix)
		vstr2v(n, ARGV[2], $radix)
		vstr2v(mod, ARGV[3], $radix)
		if (vcmp(x, mod) >= 0) {
			die("Base must be smaller than modulus!")
		}
		if (vcmp(n, mod) >= 0) {
			die("Exponent must be smaller than modulus!")
		}
		vmodexp(x, n, mod)
		print v2str(x, $radix)
	}
@@eof_embedded
EOF
